package tls

import (
	"bytes"
	"encoding/hex"
	"testing"

	"github.com/stretchr/testify/require"
)

func Test_parseSNI(t *testing.T) {
	type args struct {
		hello string
	}
	tests := []struct {
		name    string
		args    args
		wantSni string
	}{
		{
			name:    "Valid SNI",
			args:    args{hello: "1603010200010001fc0303802dfbd5b002be713804193f683bbbf9a1c9673993c5561eb0eecf1e0ce387b9200b9c0335c7752ad641ee7bbb8037c7534d8b4c001cda75c6b788a53dc4c47b8c002a3a3a130113021303c02cc02bcca9c030c02fcca8c00ac009c014c013009d009c0035002fc008c012000a010001895a5a00000000000d000b000008686162722e636f6d00170000ff01000100000a000c000ababa001d001700180019000b000201000010000b000908687474702f312e31000500050100000000000d0018001604030804040105030203080508050501080606010201001200000033002b0029baba000100001d0020365e72276a10052ecc8e4712f6da8ce322946757a4a3c2377c211935b447e861002d00020101002b000b0a0a0a0304030303020301001b00030200011a1a000100001500c9000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"},
			wantSni: "habr.com",
		},
		{
			name:    "Valid SNI",
			args:    args{hello: "1603010200010001fc03034ce96db02d4d09fa225810d7a323094f7d0a7be4263418bca574b5eb8695021e2056bd61e07b47dfad4e3c7a5b76b1bd4a4c2ef8b0b8fe2dc478ac7cdc2b1256dd002a7a7a130113021303c02cc02bcca9c030c02fcca8c00ac009c014c013009d009c0035002fc008c012000a010001892a2a000000000013001100000e7777772e676f6f676c652e636f6d00170000ff01000100000a000c000afafa001d001700180019000b000201000010000e000c02683208687474702f312e31000500050100000000000d0018001604030804040105030203080508050501080606010201001200000033002b0029fafa000100001d00203a76006087284aea210d83eece81500929319cae5b679e9789057f7abd19bb4e002d00020101002b000b0a3a3a0304030303020301001b0003020001aaaa000100001500c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"},
			wantSni: "www.google.com",
		},
		{
			name:    "No SNI",
			args:    args{hello: "16030300700200006c03035d27d80a8bd924a6afbbf9c29ca3f1135f2cc366c8b014d8a74262561dc568e320f93defe903c0f2ab7f539aabbf6b96c5ab039c7b6d2390242e6e610bf4db95e7c030000024ff0100010000000000000b0004030001020010000b000908687474702f312e31001700001603030e300b000e2c000e2900066b308206673082054fa003020102020c787015fec0a8f90827a19231300d06092a864886f70d01010b05003050310b300906035504061302424531193017060355040a1310476c6f62616c5369676e206e762d7361312630240603550403131d476c6f62616c5369676e20525341204f562053534c2043412032303138301e170d3234303131393039313033305a170d3235303231393039313032395a307e310b3009060355040613025255310f300d060355040813064d6f73636f77310f300d060355040713064d6f73636f7731363034060355040a132d4d6f62696c652054656c6553797374656d73205075626c6963204a6f696e742d53746f636b20436f6d70616e793115301306035504030c0c2a2e7274622e6d74732e727530820122300d06092a864886f70d01010105000382010f003082010a0282010100ada2dc5c166a0c39f6067924958ab90153256fb1957a7df3709edf92a1332d87eaa1b3d60204e399bdb556e5da7d4fa144e26e6bf79128513c2ca57c0911978cd00f3f1fcd2400ec6865998a2faa90ff1d2b7dcad63d55f6faa4110091ee49957c900a45839ceef73dcadb0fa88ae3e133fd771eb86a7ee199ee0a7a0983ab73c98c0fcedfba5a1d6c0e909dddc0934e60422c42bc2bf31f0c0dd7a929fe7e5d5c3c2c2b438a42ca13770ae61277a9e46749682068044f000ff8f6b2260bc1a594c3f6c65c3bba9dd37f0584487816e5b8496af3a71a5c3b700b654c5607da76df8109e8d53483ea130ba2e48787cec4763347f2e62f0815c4843d4770b786c30203010001a38203113082030d300e0603551d0f0101ff0404030205a0300c0603551d130101ff0402300030818e06082b06010505070101048181307f304406082b060105050730028638687474703a2f2f7365637572652e676c6f62616c7369676e2e636f6d2f6361636572742f67737273616f7673736c6361323031382e637274303706082b06010505073001862b687474703a2f2f6f6373702e676c6f62616c7369676e2e636f6d2f67737273616f7673736c63613230313830560603551d20044f304d304106092b06010401a03201143034303206082b06010505070201162668747470733a2f2f7777772e676c6f62616c7369676e2e636f6d2f7265706f7369746f72792f3008060667810c01020230230603551d11041c301a820c2a2e7274622e6d74732e7275820a7274622e6d74732e7275301d0603551d250416301406082b0601050507030106082b06010505070302301f0603551d23041830168014f8ef7ff2cd7867a8de6f8f248d88f1870302b3eb301d0603551d0e04160414203dec32cd25741275c9ab6eeef078123ff2dba63082017e060a2b06010401d6790204020482016e0482016a0168007600a2e30ae445efbdad9b7e38ed47677753d7825b8494d72b5e1b2cc4b950a447e70000018d20fc803b0000040300473045022100b2de06918ece4b18d7f935db1161cb29459e2769facfc0e86898efe1c1d6c93902200e0afe7cf7c47ec6f04e1c5643bc855927f55b43ae51d8b0163d1971821cc827007600e6d2316340778cc1104106d771b9cec1d240f6968486fbba87321dfd1e378e500000018d20fc803a0000040300473045022100b07ba64e27a61b25f4924f601763c6036012193e0b366745990b5f95a62c92d9022062b20e60075517f8bdffd0bfa0638c8b5e9b28e72cf9b7749d799a47a02f4b6d0076004e75a3275c9a10c3385b6cd4df3f52eb1df0e08e1b8d69c0b1fa64b1629a39df0000018d20fc800f00000403004730450221009e5002d8161c617f71d75fdb085ded"},
			wantSni: "",
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			b, err := hex.DecodeString(tt.args.hello)
			require.Nil(t, err)

			clientHello, err := readClientHello(bytes.NewReader(b))
			if tt.wantSni != "" {
				require.Nil(t, err)
			}

			gotSni := parseSNI(clientHello)
			require.Equal(t, gotSni, tt.wantSni)
		})
	}
}

func Benchmark_parseSNI(b *testing.B) {
	benchmarks := []struct {
		name  string
		hello string
	}{
		{
			name:  "Valid SNI",
			hello: "1603010200010001fc0303802dfbd5b002be713804193f683bbbf9a1c9673993c5561eb0eecf1e0ce387b9200b9c0335c7752ad641ee7bbb8037c7534d8b4c001cda75c6b788a53dc4c47b8c002a3a3a130113021303c02cc02bcca9c030c02fcca8c00ac009c014c013009d009c0035002fc008c012000a010001895a5a00000000000d000b000008686162722e636f6d00170000ff01000100000a000c000ababa001d001700180019000b000201000010000b000908687474702f312e31000500050100000000000d0018001604030804040105030203080508050501080606010201001200000033002b0029baba000100001d0020365e72276a10052ecc8e4712f6da8ce322946757a4a3c2377c211935b447e861002d00020101002b000b0a0a0a0304030303020301001b00030200011a1a000100001500c9000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
		},
		{
			name:  "Valid SNI",
			hello: "1603010200010001fc03034ce96db02d4d09fa225810d7a323094f7d0a7be4263418bca574b5eb8695021e2056bd61e07b47dfad4e3c7a5b76b1bd4a4c2ef8b0b8fe2dc478ac7cdc2b1256dd002a7a7a130113021303c02cc02bcca9c030c02fcca8c00ac009c014c013009d009c0035002fc008c012000a010001892a2a000000000013001100000e7777772e676f6f676c652e636f6d00170000ff01000100000a000c000afafa001d001700180019000b000201000010000e000c02683208687474702f312e31000500050100000000000d0018001604030804040105030203080508050501080606010201001200000033002b0029fafa000100001d00203a76006087284aea210d83eece81500929319cae5b679e9789057f7abd19bb4e002d00020101002b000b0a3a3a0304030303020301001b0003020001aaaa000100001500c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
		},
		{
			name:  "No SNI",
			hello: "16030300700200006c03035d27d80a8bd924a6afbbf9c29ca3f1135f2cc366c8b014d8a74262561dc568e320f93defe903c0f2ab7f539aabbf6b96c5ab039c7b6d2390242e6e610bf4db95e7c030000024ff0100010000000000000b0004030001020010000b000908687474702f312e31001700001603030e300b000e2c000e2900066b308206673082054fa003020102020c787015fec0a8f90827a19231300d06092a864886f70d01010b05003050310b300906035504061302424531193017060355040a1310476c6f62616c5369676e206e762d7361312630240603550403131d476c6f62616c5369676e20525341204f562053534c2043412032303138301e170d3234303131393039313033305a170d3235303231393039313032395a307e310b3009060355040613025255310f300d060355040813064d6f73636f77310f300d060355040713064d6f73636f7731363034060355040a132d4d6f62696c652054656c6553797374656d73205075626c6963204a6f696e742d53746f636b20436f6d70616e793115301306035504030c0c2a2e7274622e6d74732e727530820122300d06092a864886f70d01010105000382010f003082010a0282010100ada2dc5c166a0c39f6067924958ab90153256fb1957a7df3709edf92a1332d87eaa1b3d60204e399bdb556e5da7d4fa144e26e6bf79128513c2ca57c0911978cd00f3f1fcd2400ec6865998a2faa90ff1d2b7dcad63d55f6faa4110091ee49957c900a45839ceef73dcadb0fa88ae3e133fd771eb86a7ee199ee0a7a0983ab73c98c0fcedfba5a1d6c0e909dddc0934e60422c42bc2bf31f0c0dd7a929fe7e5d5c3c2c2b438a42ca13770ae61277a9e46749682068044f000ff8f6b2260bc1a594c3f6c65c3bba9dd37f0584487816e5b8496af3a71a5c3b700b654c5607da76df8109e8d53483ea130ba2e48787cec4763347f2e62f0815c4843d4770b786c30203010001a38203113082030d300e0603551d0f0101ff0404030205a0300c0603551d130101ff0402300030818e06082b06010505070101048181307f304406082b060105050730028638687474703a2f2f7365637572652e676c6f62616c7369676e2e636f6d2f6361636572742f67737273616f7673736c6361323031382e637274303706082b06010505073001862b687474703a2f2f6f6373702e676c6f62616c7369676e2e636f6d2f67737273616f7673736c63613230313830560603551d20044f304d304106092b06010401a03201143034303206082b06010505070201162668747470733a2f2f7777772e676c6f62616c7369676e2e636f6d2f7265706f7369746f72792f3008060667810c01020230230603551d11041c301a820c2a2e7274622e6d74732e7275820a7274622e6d74732e7275301d0603551d250416301406082b0601050507030106082b06010505070302301f0603551d23041830168014f8ef7ff2cd7867a8de6f8f248d88f1870302b3eb301d0603551d0e04160414203dec32cd25741275c9ab6eeef078123ff2dba63082017e060a2b06010401d6790204020482016e0482016a0168007600a2e30ae445efbdad9b7e38ed47677753d7825b8494d72b5e1b2cc4b950a447e70000018d20fc803b0000040300473045022100b2de06918ece4b18d7f935db1161cb29459e2769facfc0e86898efe1c1d6c93902200e0afe7cf7c47ec6f04e1c5643bc855927f55b43ae51d8b0163d1971821cc827007600e6d2316340778cc1104106d771b9cec1d240f6968486fbba87321dfd1e378e500000018d20fc803a0000040300473045022100b07ba64e27a61b25f4924f601763c6036012193e0b366745990b5f95a62c92d9022062b20e60075517f8bdffd0bfa0638c8b5e9b28e72cf9b7749d799a47a02f4b6d0076004e75a3275c9a10c3385b6cd4df3f52eb1df0e08e1b8d69c0b1fa64b1629a39df0000018d20fc800f00000403004730450221009e5002d8161c617f71d75fdb085ded",
		},
	}

	for _, bm := range benchmarks {
		b.Run(bm.name, func(b *testing.B) {
			clientHello, err := hex.DecodeString(bm.hello)
			if err != nil {
				b.Fatalf("failed to decode client hello hex: %v", err)
			}
			for i := 0; i < b.N; i++ {
				parseSNI(clientHello)
			}
		})
	}
}
